.Dd May 15, 2021
.Dt KAK 1
.Os
.Sh NAME
.Nm kak
.Nd a vim-inspired, selection oriented code editor
.
.Sh SYNOPSIS
.Nm
.Op Fl d
.Op Fl n
.Op Fl ro
.Op Fl c Ar session_id | Fl s Ar session_id
.Op Fl ui Ar ui_type
.Op Fl e Ar command
.Op Fl E Ar command
.Op Ar +line Ns Oo Ar :column Oc | +:
.Op Ar file ...
.
.Nm
.Fl f Ar keys
.Op Fl q
.Op Fl i Ar suffix
.IR file ...
.
.Nm
.Fl p Ar session_id
.
.Nm
.Fl l
.Nm
.Fl clear
.
.Nm
.Fl version
.
.Nm
.Fl help
.
.Sh DESCRIPTION
.Pp
.Sy Kakoune
is a code editor heavily inspired by
.Xr vim 1
and
.Xr vi 1 .
As such, most of its commands are similar to
.Xr vi 1 Ap s,
sharing its
.Dq keystrokes as a text editing language
model.
.Pp
.Sy Kakoune
operates in two modes, normal and insertion.
In insertion mode, keys are directly inserted into the current buffer.
In normal mode, keys are used to manipulate the current selection and to
enter insertion mode.
.Pp
.Sy Kakoune has a strong focus on interactivity.
Most commands provide immediate and incremental results, while still
being competitive in keystroke count with vim.
.Pp
.Sy Kakoune
works on selections, which are oriented, inclusive ranges of characters.
Selections have an anchor and a cursor.
Most commands move both of them except when extending selection, where
the anchor character stays fixed and the cursor moves around.
.Pp
The options are as follows:
.Bl -tag -width indent
.It Fl help
Display a help message and quit.
.
.It Fl version
Display Kakoune version and quit.
.
.It Fl n
Do not load the system's kakrc.
.Pq Pa /usr/share/kak/kakrc
.
.It Fl l
List existing sessions.
.
.It Fl d
Run as a headless session
.Pq requires Fl s .
.
.It Fl e Ar command
Execute
.Ar command
after the client initialization phase.
.
.It Fl E Ar command
Execute
.Ar command
after the server initialization phase.
.
.It Fl f Ar keys
Enter in
.Sq filter mode :
select the whole file, then execute
.Ar keys .
.
.It Fl i Ar suffix
Backup the files on which a filter is applied, using the given suffix.
.
.It Fl q
When in
.Sq filter mode ,
don't print any errors
.
.It Fl p Ar session_id
Send the commands written on the standard input to session
.Ar session_id .
.
.It Fl c Ar session_id
Connect to the given session
.Ar session_id .
.
.It Fl s Ar session_id
Set the current session name to
.Ar session_id .
.
.It Fl ui Ar type
Select user interface
.Ar type ,
which can be
.Em ncurses ,
.Em dummy ,
or
.Em json.
.
.It Fl clear
Remove sessions that were terminated in an incorrect state
.Pq e.g. after a crash .
.
.It Fl ro
Begin in
.Em readonly mode ,
all the buffers opened will not be written to disk.
.
.It Ar +line Ns Oo Ar :column Oc | Ar +:
Specify a target
.Pf + Ar line
and
.Pf : Ar column
for the first file.
When the plus sign is followed by only a colon, then the cursor is sent
to the last line of the file.
.
.It Ar file ...
One or more
.Ar file(s)
to edit.
.
.Sh ENVIRONMENT
.Bl -tag
.It KAKOUNE_POSIX_SHELL
Overrides the POSIX shell used for
.Em %sh{...}
expansion, which is
.Pa /bin/sh
.Pq Xr sh 1
if unset.
.
.It KAKOUNE_CONFIG_DIR
Overrides the location of the directory containing Kakoune user
configuration. If unset,
.Pa $XDG_CONFIG_HOME/kak
is used.
.
.It XDG_CONFIG_HOME
Path to the user's configuration directory. If unset,
.Pa $HOME/.config
is used.
.
.It XDG_RUNTIME_DIR
Path to the user's session's sockets. If unset,
.Pa $TMPDIR/kakoune
is used.
.
.Sh FILES
In the paths documented below, \fI<rtdir>\fR refers to the runtime directory,
whose value is determined in relation to the path to the \fBkak\fR binary:
\fI<rtdir>\fR = \fI<path_to_kak_binary>/../share/kak\fR.

If not started with the \fB\-n\fR switch, Kakoune will first load
\fI<rtdir>/kakrc\fR, which will in turn load the following additional files:

.nf
.RS
if the \fI$KAKOUNE_CONFIG_DIR/autoload\fR directory exists, recursively load every
\fI*.kak\fR files in it and its sub-directories
.RE
.fi

.nf
.RS
if it does not exist, fall back to the system\-wide autoload directory
in \fI<rtdir>/autoload\fR, and recursively load all files in a similar way
.RE
.fi

.nf
.RS
\fI<rtdir>/kakrc.local\fR, if it exists; this is a user\-defined system\-wide
configuration
.RE
.fi

.nf
.RS
\fI$KAKOUNE_CONFIG_DIR/kakrc\fR, if it exists; this is the user configuration
.RE
.fi

Consequently, if the \fI$KAKOUNE_CONFIG_DIR/autoload\fR directory exists,
only scripts stored within that directory will be loaded \- the built-in
\fI*.kak\fR files \fBwill not be\fR.

Users who still want to have the built\-in scripts loaded along their own
can create a symbolic link to \fI<rtdir>/autoload\fR (or to individual
scripts in it) in their user\-configuration directory:

.nf
.RS
ln -s \fI<rtdir>\fR/autoload "${XDG_CONFIG_HOME:-$HOME/.config}"/kak/autoload
.RE
.fi
.
.Sh EXAMPLES
.PP
Edit a file:

.nf
.RS
kak /path/to/file
.RE
.fi

.PP
Edit multiple files (multiple buffers will be created):

.nf
.RS
kak ./file1.txt /path/to/file2.c
.RE
.fi

.PP
Insert a modeline that sets the tabstop variable at the beginning of several
source code files:

.nf
.RS
kak \-f "ggO// kak: tabstop=8<esc>" *.c
.RE
.fi
.
.Sh SEE ALSO
.Pp
For the complete on-line documentation, use the
.Ic :doc
command after starting Kakoune.
.Pp
.Lk https://github.com/mawww/kakoune/wiki The Kakoune wiki .
.Pp
.Lk https://kakoune.org The main Kakoune web site .
.Pp
.Xr vi 1 ,
.Xr vim 1 ,
.Xr sam 1plan9 .
.
.Sh AUTHORS
.An Maxime Coste Aq Mt frrrwww@gmail.com
and many others.
